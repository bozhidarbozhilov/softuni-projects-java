-- Problem 1
CREATE TABLE `passports`(
`passport_id` INT UNSIGNED PRIMARY KEY,
`passport_number` VARCHAR(50) NOT NULL UNIQUE
);

CREATE TABLE `persons`(
`person_id`	INT UNSIGNED ,
`first_name` VARCHAR(50) NOT NULL,
`salary` DECIMAL(8,2),
`passport_id` INT UNSIGNED NOT NULL UNIQUE
);

INSERT INTO `passports`
VALUES(101, 'N34FG21B'),
(102, 'K65LO4R7'),
(103, 'ZE657QP2');

INSERT INTO `persons`
VALUES(1, 'Roberto',43300.00,102),
(2, 'Tom', 56100.00, 103),
(3, 'Yana', 60200.00, 101);

ALTER TABLE `persons`
ADD CONSTRAINT pk_person_id PRIMARY KEY (`person_id`),
ADD CONSTRAINT fk_passport_id FOREIGN KEY (`passport_id`) REFERENCES `passports`(`passport_id`);

-- Problem 2
CREATE TABLE IF NOT EXISTS `manufacturers`(
`manufacturer_id` INT UNSIGNED PRIMARY KEY,
`name` VARCHAR(50) NOT NULL,
`established_on` DATE
);

CREATE TABLE IF NOT EXISTS `models`(
`model_id`	INT UNSIGNED PRIMARY KEY,
`name` VARCHAR(50) NOT NULL,
`manufacturer_id` INT UNSIGNED NOT NULL,
CONSTRAINT fk_manifacturer_id FOREIGN KEY (`manufacturer_id`) REFERENCES `manufacturers`(`manufacturer_id`)
);

INSERT INTO `manufacturers`
VALUES(1, 'BMW', '1916-03-01'),
(2, 'Tesla', '2003-01-01'),
(3, 'Lada', '1966-05-01');

INSERT INTO `models`
VALUES(101, 'X1', 1),
(102, 'i6', 1),
(103, 'Model S', 2),
(104, 'Model X', 2),
(105, 'Model 3', 2),
(106, 'Nova', 3);

-- Problem 3
CREATE TABLE IF NOT EXISTS `students` (
    `student_id` INT UNSIGNED PRIMARY KEY,
    `name` VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS `exams` (
    `exam_id` INT UNSIGNED PRIMARY KEY,
    `name` VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS `students_exams` (
    `student_id` INT UNSIGNED,
    `exam_id` INT UNSIGNED,
    CONSTRAINT pk_students_exams PRIMARY KEY (`student_id` , `exam_id`),
    CONSTRAINT fk_students_exams_students FOREIGN KEY (`student_id`)
        REFERENCES `students` (`student_id`),
    CONSTRAINT fk_students_exams_exams FOREIGN KEY (`exam_id`)
        REFERENCES `exams` (`exam_id`)
);

INSERT INTO `students`
VALUES(1, 'Mila'),
(2, 'Toni'),
(3,'Ron');

INSERT INTO `exams`
VALUES (101, 'Spring MVC'),
(102, 'Neo4j'),
(103, 'Oracle 11g');

INSERT INTO `students_exams`
VALUES(1,101),
(1,102),
(2,101),
(3,103),
(2,102),
(2,103);

-- Problem 4
CREATE TABLE `teachers`(
`teacher_id` INT UNSIGNED PRIMARY KEY,
`name` VARCHAR(100) NOT NULL,
`manager_id` INT UNSIGNED
);

INSERT INTO `teachers`
VALUES (101, 'John', NULL),
(102, 'Maya', 106),
(103, 'Silvia', 106),
(104, 'Ted', 105),
(105,'Mark', 101),
(106, 'Greta', 101);


ALTER TABLE `teachers` 
ADD CONSTRAINT fk_self_reference FOREIGN KEY (`manager_id`) REFERENCES `teachers`(`teacher_id`);

-- Problem 5

CREATE TABLE IF NOT EXISTS `item_types`(
`item_type_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50)
);
CREATE TABLE IF NOT EXISTS `items`(
`item_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) ,
`item_type_id` INT(11) ,
CONSTRAINT fk_item_type_id FOREIGN KEY(`item_type_id`) REFERENCES `item_types`(`item_type_id`)
);

CREATE TABLE IF NOT EXISTS `cities`(
`city_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50) 
);

CREATE TABLE IF NOT EXISTS `customers`(
`customer_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`name` VARCHAR(50),
`birthday` DATE,
`city_id` INT(11),
CONSTRAINT fk_city_id FOREIGN KEY(`city_id`) REFERENCES `cities`(`city_id`)
);

CREATE TABLE IF NOT EXISTS `orders`(
`order_id` INT(11) PRIMARY KEY AUTO_INCREMENT,
`customer_id` INT(11),
CONSTRAINT fk_customer_id FOREIGN KEY(`customer_id`) REFERENCES `customers`(`customer_id`)
);

CREATE TABLE IF NOT EXISTS `order_items`(
`order_id` INT(11),
`item_id` INT(11),
CONSTRAINT pk_order_items PRIMARY KEY(`order_id`, `item_id`),
CONSTRAINT fk_order_items_orders FOREIGN KEY(`order_id`) REFERENCES `orders`(`order_id`),
CONSTRAINT fk_order_items_items FOREIGN KEY(`item_id`) REFERENCES `items`(`item_id`)
);

-- Problem 6

CREATE TABLE IF NOT EXISTS `majors`(
`major_id` INT(11) PRIMARY KEY,
`name` VARCHAR(50)
);
CREATE TABLE IF NOT EXISTS `students`(
`student_id` INT(11) PRIMARY KEY,
`student_number` VARCHAR(12) ,
`student_name` VARCHAR(50) ,
`major_id` INT(11) ,
CONSTRAINT fk_major_id FOREIGN KEY(`major_id`) REFERENCES `majors`(`major_id`)
);

CREATE TABLE IF NOT EXISTS `subjects`(
`subject_id` INT(11) PRIMARY KEY,
`subject_name` VARCHAR(50) 
);

CREATE TABLE IF NOT EXISTS `payments`(
`payment_id` INT(11) PRIMARY KEY,
`payment_date` DATE,
`payment_amount` DECIMAL(8,2),
`student_id` INT(11),
CONSTRAINT fk_student_id FOREIGN KEY(`student_id`) REFERENCES `students`(`student_id`)
);


CREATE TABLE IF NOT EXISTS `agenda`(
`student_id` INT(11),
`subject_id` INT(11),
CONSTRAINT pk_agenda PRIMARY KEY(`student_id`, `subject_id`),
CONSTRAINT fk_agenda_students FOREIGN KEY(`student_id`) REFERENCES `students`(`student_id`),
CONSTRAINT fk_agenda_subject FOREIGN KEY(`subject_id`) REFERENCES `subjects`(`subject_id`)
);

-- Problem 9
SELECT 
    m.mountain_range, p.peak_name, p.elevation AS peak_elevation
FROM
    peaks AS p
        JOIN
    mountains AS m ON p.mountain_id = m.id
WHERE
    m.mountain_range = 'Rila'
ORDER BY p.elevation DESC;