-- Problem 1
CREATE PROCEDURE usp_get_employees_salary_above_35000()
BEGIN
SELECT 
    e.first_name, e.last_name
FROM
    employees AS e
WHERE
    e.salary > 35000
ORDER BY e.first_name, e.last_name, e.employee_id;
END

-- Problem 2
CREATE PROCEDURE usp_get_employees_salary_above(num DECIMAL(19,4))
BEGIN
SELECT 
    e.first_name, e.last_name
FROM
    employees AS e
WHERE
    e.salary >= num
ORDER BY e.first_name, e.last_name, e.employee_id;
END

-- Problem 3
CREATE PROCEDURE usp_get_towns_starting_with(start_string VARCHAR(20))
BEGIN 
SELECT 
    t.name
FROM
    towns AS t
WHERE
    t.name LIKE CONCAT(start_string, '%')
ORDER BY t.name;
END

-- Problem 4
CREATE PROCEDURE usp_get_employees_from_town(town_name VARCHAR(50))
BEGIN
SELECT 
	e.first_name, e.last_name
FROM employees AS e 
	JOIN addresses AS a ON e.address_id = a.address_id
    JOIN towns AS t ON a.town_id = t.town_id
WHERE 
	t.name = town_name
ORDER BY e.first_name, e.last_name, e.employee_id;
END

-- Problem 5
CREATE FUNCTION ufn_get_salary_level(salary DECIMAL(19,4))
RETURNS VARCHAR(10)
DETERMINISTIC
BEGIN
	DECLARE level VARCHAR(10);
	SET level = IF(salary<30000, 'Low', IF(salary>=30000 AND salary<=50000, 'Average', 'High'));
    RETURN level;
END


-- Problem 6
CREATE PROCEDURE `usp_get_employees_by_salary_level`(salary_level VARCHAR(10))
BEGIN
SELECT 
    e.first_name, e.last_name
FROM
    employees AS e
WHERE
    IF(salary<30000, 'Low', IF(salary>=30000 AND salary<=50000, 'Average', 'High')) = salary_level
ORDER BY e.first_name DESC , e.last_name DESC;
END

-- Problem 7
CREATE FUNCTION `ufn_is_word_comprised`(set_of_letters varchar(50), word varchar(50)) RETURNS bit(1)
    DETERMINISTIC
BEGIN
DECLARE counter INT;
SET counter = 0;

WHILE LOCATE(SUBSTR(LOWER(word),counter+1,1), LOWER(set_of_letters)) > 0 AND counter < CHAR_LENGTH(word) DO
SET counter = counter + 1;
END WHILE;
RETURN IF(counter = CHAR_LENGTH(word), 1, 0);
END

-- Problem 8
CREATE PROCEDURE usp_get_holders_full_name()
BEGIN
SELECT 
    CONCAT_WS(' ', ah.first_name, ah.last_name) AS 'full_name'
FROM
    account_holders AS ah
ORDER BY full_name, ah.id;
END

-- Problem 9
CREATE DEFINER=`root`@`localhost` PROCEDURE `usp_get_holders_with_balance_higher_than`(target_balance DECIMAL)
BEGIN
SELECT 
    ah.first_name, ah.last_name
FROM
    account_holders AS ah
        INNER JOIN
    (SELECT 
        id, account_holder_id, SUM(balance) AS 'total_balance'
    FROM
        accounts
    GROUP BY account_holder_id) AS dt ON dt.account_holder_id = ah.id
WHERE dt.total_balance > target_balance
ORDER BY  dt.id, ah.first_name, ah.last_name;
END

-- Problem 10
CREATE FUNCTION `ufn_calculate_future_value`(init_sum DOUBLE, interest DOUBLE, years INT) RETURNS double
    DETERMINISTIC
BEGIN
DECLARE future_value DOUBLE;
SET future_value = init_sum * POW((1+interest), years);
RETURN future_value;
END

-- Problem 11
CREATE FUNCTION `ufn_calculate_future_value`(init_sum DOUBLE, interest DOUBLE, years INT) 
RETURNS DECIMAL(19,4)
    DETERMINISTIC
BEGIN
DECLARE future_value DOUBLE;
SET future_value = init_sum * POW((1+interest), years);
RETURN future_value;
END;
CREATE PROCEDURE usp_calculate_future_value_for_account(account_id INT, interest_rate DOUBLE(8,4))
BEGIN
SELECT 
    acc.id,
    ah.first_name,
    ah.last_name,
    acc.balance AS 'current_balance',
    `ufn_calculate_future_value`(acc.balance, interest_rate, 5) AS `balance_in_5_years`
FROM
    accounts AS acc
        INNER JOIN
    account_holders AS ah ON acc.account_holder_id = ah.id
WHERE acc.id = account_id; 
END;

-- Problem 12
DROP PROCEDURE usp_deposit_money;

DELIMITER $$
CREATE PROCEDURE usp_deposit_money(account_id INT(11), money_amount DECIMAL(19,4)) 
BEGIN
START TRANSACTION;
IF money_amount <= 0 OR ((SELECT COUNT(acc.id) FROM accounts AS acc WHERE acc.id LIKE account_id) <> 1)
OR ((SELECT acc.balance FROM accounts AS acc WHERE acc.id LIKE account_id) < money_amount) THEN
    ROLLBACK;
    ELSE
UPDATE accounts AS a 
SET 
    a.balance = a.balance + money_amount
WHERE
    a.id = account_id;
COMMIT;
END IF;
END
$$
DELIMITER ;

CALL usp_deposit_money(1,10.77);

-- Problem 13
CREATE PROCEDURE usp_withdraw_money(account_id INT(11), money_amount DECIMAL (19,4)) 
BEGIN
START TRANSACTION;
IF money_amount < 0 OR ((SELECT acc.balance FROM accounts AS acc WHERE acc.id=account_id) <= money_amount) 
OR ((SELECT COUNT(acc.id) FROM accounts AS acc WHERE acc.id =account_id) <> 1) THEN
ROLLBACK;
ELSE
UPDATE accounts AS a 
SET 
    a.balance = a.balance - money_amount
WHERE
    a.id = account_id;
COMMIT;
END IF;
END

-- Problem 14
CREATE PROCEDURE usp_transfer_money(from_account_id INT(11), to_account_id INT(11), amount DECIMAL (19,4)) 
BEGIN
START TRANSACTION;
IF amount < 0 OR ((SELECT acc.balance FROM accounts AS acc WHERE acc.id=from_account_id) < amount) 
OR ((SELECT COUNT(acc.id) FROM accounts AS acc WHERE acc.id = to_account_id OR acc.id = from_account_id) <> 2) 
OR(from_account_id = to_account_id)THEN
ROLLBACK;
ELSE
UPDATE accounts AS a 
SET 
    a.balance = a.balance - amount
WHERE
    a.id = from_account_id;
UPDATE accounts AS a 
SET 
    a.balance = a.balance + amount
WHERE
    a.id = to_account_id;
COMMIT;
END IF;
END

-- Problem 15
CREATE TABLE IF NOT EXISTS `logs`(
`log_id` INT PRIMARY KEY AUTO_INCREMENT,
`account_id` INT(11),
`old_sum` DECIMAL(19,4),
`new_sum` DECIMAL(19,4));

CREATE TRIGGER tr_log_account
AFTER UPDATE
ON accounts
FOR EACH ROW
BEGIN 
INSERT INTO `logs`(account_id, old_sum, new_sum)
VALUES (OLD.id, OLD.balance, NEW.balance);
END

-- Problem 16
DROP TABLE IF EXISTS `notification_emails`;
DROP TRIGGER tr_emails;

CREATE TABLE IF NOT EXISTS `notification_emails`(
`log_id` INT PRIMARY KEY AUTO_INCREMENT,
`recipient` INT(11),
`subject` VARCHAR(100),
`body` VARCHAR(200));

DELIMITER $$
CREATE TRIGGER tr_emails
AFTER INSERT
ON `logs`
FOR EACH ROW
BEGIN 
INSERT INTO `notification_emails`(`recipient`, `subject`, `body`)
VALUES (NEW.account_id, CONCAT('Balance change for account:',' ',NEW.account_id)
,CONCAT('On',' ',DATE_FORMAT(NOW(), '%b %e %Y at %r'),' ','your balance was changed from',' ', NEW.old_sum,' ' ,'to',' ', NEW.new_sum,'.'));
END
$$
DELIMITER ;

CALL usp_withdraw_money(1, 10);